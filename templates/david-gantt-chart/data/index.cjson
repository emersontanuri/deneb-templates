[
    {"name": "dataset"},
    {
      "name": "collapsedPhases",
      "on": [
        {
          "trigger": "phaseClicked",
          "toggle": "phaseClicked"
        },
        {
          "trigger": "closeAll",
          "remove": true
        },
        {
          "trigger": "closeAll",
          "insert": "data('phases')"
        },
        {
          "trigger": "openAll",
          "remove": true
        }
      ]
    },
    {
      "name": "input",
      "source": "dataset",
      "transform": [
        {
          "type": "formula",
          "as": "start",
          "expr": "utc(year(datum['start']),month(datum['start']),date(datum['start']))"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "utc(year(datum['end']),month(datum['end']),date(datum['end']))"
        },
        {
          "type": "formula",
          "as": "labelEnd",
          "expr": "datum['end']"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "datetime(+datum['end']+oneDay)"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "(datum['end']-datum['start'])/oneDay"
        },
        {
          "type": "formula",
          "as": "completionLabel",
          "expr": "datum['completion']+'%'"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": ["rank"],
          "as": ["taskSort"],
          "groupby": ["phase"]
        },
        {
          "type": "formula",
          "as": "start",
          "expr": "+datum['start']"
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "+datum['end']"
        }
      ]
    },
    {
      "name": "phases",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "fields": [
            "start",
            "end",
            "completion",
            "task",
            "completion",
            "labelEnd"
          ],
          "ops": [
            "min",
            "max",
            "sum",
            "count",
            "mean",
            "max"
          ],
          "as": [
            "start",
            "end",
            "sum",
            "count",
            "completion",
            "labelEnd"
          ],
          "groupby": ["phase"]
        },
        {
          "type": "formula",
          "as": "task",
          "expr": "datum['phase']"
        },
        {
          "type": "formula",
          "as": "taskSort",
          "expr": "0"
        },
        {
          "type": "formula",
          "as": "completion",
          "expr": "round(datum['completion'])"
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "(datum['end']-datum['start'])/oneDay"
        },
        {
          "type": "window",
          "sort": {
            "field": "start",
            "order": "ascending"
          },
          "ops": [
            "row_number",
            "row_number"
          ],
          "as": ["phaseSort", "id"]
        },
        {
          "type": "formula",
          "as": "id",
          "expr": "length(data('input'))+datum['id']+'^^^^^'"
        }
      ]
    },
    {
      "name": "phasePaths",
      "source": "phases",
      "transform": [
        {
          "type": "formula",
          "as": "phasePath",
          "expr": "'M ' + scale('x', datum['start'])+' '  +   (scale('y', datum['id'])+yPaddingInner) + ' H ' +  scale('x', datum['end'])+' '   + ' v ' +  phaseSymbolHeight + ' L ' +  (scale('x', datum['end']) - phaseSymbolWidth) +' '  +   (scale('y', datum['id'])+yPaddingInner+phaseSymbolHeight/2 ) + ' L ' +  (scale('x', datum['start'])+phaseSymbolWidth) + ' '  +   (scale('y', datum['id'])+yPaddingInner+phaseSymbolHeight/2) + ' L ' +  (scale('x', datum['start'])) + ' '  +   (scale('y', datum['id'])+ yPaddingInner+phaseSymbolHeight) + ' z'"
        }
      ]
    },
    {
      "name": "tasks",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum.milestone != true"
        },
        {
          "type": "filter",
          "expr": "!indata('collapsedPhases', 'phase', datum['phase'])"
        }
      ]
    },
    {
      "name": "milestones",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "datum.milestone == true"
        },
        {
          "type": "filter",
          "expr": "!indata('collapsedPhases', 'phase', datum['phase'])"
        }
      ]
    },
    {
      "name": "yScale",
      "source": [
        "tasks",
        "phases",
        "milestones"
      ],
      "transform": [
        {
          "type": "lookup",
          "from": "phases",
          "key": "phase",
          "values": ["phaseSort"],
          "fields": ["phase"]
        },
        {
          "type": "window",
          "sort": {
            "field": [
              "phaseSort",
              "taskSort"
            ],
            "order": [
              "ascending",
              "ascending"
            ]
          },
          "ops": ["row_number"],
          "as": ["finalSort"]
        }
      ]
    },
    {
      "name": "xExt",
      "source": "input",
      "transform": [
        {
          "type": "aggregate",
          "fields": ["start", "end"],
          "ops": ["min", "max"],
          "as": ["s", "e"]
        },
        {
          "type": "formula",
          "as": "days",
          "expr": "(datum.e-datum.s)/oneDay"
        }
      ]
    },
    {
      "name": "weekends",
      "transform": [
        {
          "type": "sequence",
          "start": 0,
          "stop": {
            "signal": "dayBandwidthRound>=minMonthBandwidth? span(xDom)/oneDay:0"
          },
          "as": "sequence"
        },
        {
          "type": "formula",
          "as": "start",
          "expr": "datetime(utc(year(xDom[0]),month(xDom[0]),date(xDom[0]))   +(oneDay*datum.sequence))"
        },
        {
          "type": "filter",
          "expr": "day(datum['start']) == 6 || day(datum['start']) == 0 "
        },
        {
          "type": "formula",
          "as": "end",
          "expr": "datetime(+datum['start']+(oneDay))"
        }
      ]
    },
    {
      "name": "taskDependencyArrows",
      "source": "yScale",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum.dependencies) && datum.dependencies!='' "
        }
      ]
    },
    {
      "name": "phaseDependencyArrows",
      "source": "input",
      "transform": [
        {
          "type": "filter",
          "expr": "indata('collapsedPhases', 'phase', datum['phase']) "
        },
        {
          "type": "joinaggregate",
          "fields": ["id", "start"],
          "ops": ["values", "min"],
          "as": [
            "allPhaseIds",
            "start"
          ],
          "groupby": ["phase"]
        },
        {
          "type": "formula",
          "as": "id",
          "expr": "toString(datum['id'])"
        },
        {
          "type": "formula",
          "as": "allPhaseIds",
          "expr": "pluck(datum.allPhaseIds, 'id')"
        },
        {
          "type": "formula",
          "as": "dependencies",
          "expr": "split(datum.dependencies,',')"
        },
        {
          "type": "flatten",
          "fields": ["dependencies"]
        },
        {
          "type": "formula",
          "as": "internalDependenciesIndex",
          "expr": "indexof(datum.allPhaseIds,datum.dependencies)"
        },
        {
          "type": "formula",
          "as": "milestone",
          "expr": "null"
        },
        {
          "type": "filter",
          "expr": "datum.dependencies!='null' && datum.dependencies!='' && datum.internalDependenciesIndex == -1 "
        },
        {
          "type": "lookup",
          "from": "phases",
          "key": "phase",
          "values": ["id"],
          "fields": ["phase"],
          "as": ["id"]
        }
      ]
    },
    {
      "name": "dependencyArrows",
      "source": [
        "taskDependencyArrows",
        "phaseDependencyArrows"
      ]
    },
    {
      "name": "dependencyLines",
      "source": [
        "yScale",
        "phaseDependencyArrows"
      ],
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum.dependencies) && datum.dependencies!='' "
        },
        {
          "type": "formula",
          "as": "dependencies",
          "expr": "split(datum.dependencies,',')"
        },
        {
          "type": "flatten",
          "fields": ["dependencies"]
        },
        {
          "type": "lookup",
          "from": "input",
          "key": "id",
          "values": [
            "id",
            "end",
            "phase"
          ],
          "fields": ["dependencies"],
          "as": [
            "sourceId",
            "sourceEnd",
            "sourcePhase"
          ]
        },
        {
          "type": "lookup",
          "from": "phases",
          "key": "phase",
          "values": ["id", "end"],
          "fields": ["sourcePhase"],
          "as": [
            "sourcePhaseId",
            "sourcePhaseEnd"
          ]
        },
        {
          "type": "formula",
          "as": "sourceId",
          "expr": "indata('collapsedPhases', 'phase', datum.sourcePhase) == true?datum.sourcePhaseId:datum.sourceId"
        },
        {
          "type": "formula",
          "as": "sourceEnd",
          "expr": "indata('collapsedPhases', 'phase', datum.sourcePhase) == true?datum.sourcePhaseEnd:datum.sourceEnd"
        },
        {
          "type": "formula",
          "as": "plottedStart",
          "expr": "datum.milestone == null || datum.milestone == false?scale('x',datum['start'])- sqrt(arrowSymbolSize) - 1:(scale('x',datum['start']) +(dayBandwidth/2) - (sqrt(milestoneSymbolSize)/2) - sqrt(arrowSymbolSize)) - 1"
        },
        {
          "type": "formula",
          "as": "plottedSourceEnd",
          "expr": "scale('x',datum.sourceEnd) - (dayBandwidth/2) "
        },
        {
          "type": "formula",
          "as": "a",
          "expr": "[datum.milestone == null || datum.milestone == false?scale('x',datum['start']):scale('x',datum['start']) +(dayBandwidth/2) - (sqrt(milestoneSymbolSize)/2)  ,scale('y', datum['id'])+bandwidth('y')/2 ]"
        },
        {
          "type": "formula",
          "as": "b",
          "expr": "[datum.plottedStart >= datum.plottedSourceEnd?datum.plottedSourceEnd :datum.plottedStart ,scale('y', datum['id'])+bandwidth('y')/2]"
        },
        {
          "type": "formula",
          "as": "c",
          "expr": "[datum.plottedSourceEnd,scale('y',datum.sourceId)+bandwidth('y')/2]"
        },
        {
          "type": "formula",
          "as": "d",
          "expr": "[datum.plottedStart > datum.plottedSourceEnd?null:datum.plottedStart ,datum.plottedStart > datum.plottedSourceEnd?null:scale('y',datum.sourceId)+(bandwidth('y'))]"
        },
        {
          "type": "formula",
          "as": "e",
          "expr": "[datum.plottedStart > datum.plottedSourceEnd?null:datum.plottedSourceEnd,datum.plottedStart > datum.plottedSourceEnd?null:scale('y',datum.sourceId)+(bandwidth('y'))]"
        },
        {
          "type": "fold",
          "fields": [
            "a",
            "b",
            "d",
            "e",
            "c"
          ]
        },
        {
          "type": "filter",
          "expr": "datum.value[0] != null"
        },
        {
          "type": "formula",
          "as": "value0",
          "expr": "datum.value[0]"
        },
        {
          "type": "formula",
          "as": "value1",
          "expr": "datum.value[1]"
        },
        {
          "type": "window",
          "ops": ["row_number"],
          "as": ["duplicates"],
          "groupby": [
            "id",
            "sourceId",
            "value0",
            "value1"
          ]
        },
        {
          "type": "filter",
          "expr": "datum.duplicates == 1"
        }
      ]
    },
    {
      "name": "buttons",
      "values": [
        {
          "side": "left",
          "text": "Close",
          "x": 15,
          "leftRadius": 4
        },
        {
          "side": "left",
          "text": "Open",
          "x": 65,
          "rightRadius": 4
        },
        {
          "side": "right",
          "text": "All",
          "x": 50,
          "rightRadius": 4
        },
        {
          "side": "right",
          "text": "Years",
          "x": 100
        },
        {
          "side": "right",
          "text": "Months",
          "x": 150
        },
        {
          "side": "right",
          "text": "Days",
          "x": 200,
          "leftRadius": 4
        }
      ]
    }
  ]